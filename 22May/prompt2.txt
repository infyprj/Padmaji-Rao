These are the files I have Make  minimal chnages to implement with Behaviour Subject:
//navbar.compoent.ts
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { CartService } from '../services/cart-service/cart.service';
import { ProductService } from '../services/product-service/product.service';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent {
  userRoleId: number = 0;
  userId: number = 0;
  guestNavbarShow: boolean = false;
  customerNavbarShow: boolean = false;
  adminNavbarShow: boolean = false;
  cartCount: number = 0;
  wishlistCount: number = 0;

  showMenu = false;
  showDropdown = false;

  constructor(private router: Router, private _productService: ProductService, private _cartService: CartService) { }



  ngOnInit(): void {

    const uri: string = <string>sessionStorage.getItem('userRoleId');
    const ui: string = <string>sessionStorage.getItem('userId');
    this.userRoleId = parseInt(uri);
    this.userId = parseInt(ui);
    this.getCounts()
    
    if (this.userRoleId === 2) {
      this.customerNavbarShow = true;
    }
    else if (this.userRoleId === 3) {
      this.adminNavbarShow = true;
    }
    else {
      this.guestNavbarShow = true;
    }
    this.userId = parseInt(ui);
  }

  getCounts(): void {

    this._productService.getSavedProducts(this.userId).subscribe(
      responseData => {
        if (responseData) {
          this.wishlistCount = responseData.length;
        }
      },
      responseError => {
        console.error("Error :" + responseError)
      }
    )


    this._cartService.getCartItems().subscribe(
      responseData => {
        if (responseData) {
          this.cartCount = responseData.length;
        }
      },
      responseError => {
        console.error("Error :" + responseError)
      }
    )
  }

  isActiveLink(route: string): boolean {
    return this.router.url === route;
  }

  toggleMenu(): void {
    this.showMenu = !this.showMenu;
  }

  clickDropdown(): void {
    this.showDropdown = true;
  }


  onHover(): void {
    this.showDropdown = true;
  }

  onMouseLeave(): void {
    this.showDropdown = false;
  }


  onClickLogout(): void {
    sessionStorage.removeItem("userId");
    sessionStorage.removeItem("userRoleId")
    this.router.navigate(['login']);
    this.adminNavbarShow = false;
    this.guestNavbarShow = false;
    this.customerNavbarShow = false;
    this.ngOnInit();
  }
}



//product-detail.component.ts
import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ISavedProduct } from '../interfaces/saved-product'
import { ProductService } from '../services/product-service/product.service';
import { ICartItem } from '../interfaces/cart';
import { CartService } from '../services/cart-service/cart.service';


interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;
  is3DViewActive = false
  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb" // Default model URL
  showToast = false;
  toastMessage = "";
  toastStatus = 0; // 0 = already added (orange), 1 = successfully added (green)
  userId: number = 0;
  userRoleId: number = 0;



  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService,
    private _cartSerive: CartService,
    private elementRef: ElementRef,
  ) { }

  ngOnInit(): void {
    this.productId = +this.route.snapshot.params['id'];

    

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
    } else {
      this.errorMsg = 'Invalid product ID';
      this.loading = false;
    }

  }
  ngAfterViewInit() {
    
    this.loadModelViewerScript()
  }

  loadModelViewerScript() {
    const script = document.createElement("script")
    script.type = "module"
    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js"
    document.body.appendChild(script)
  }


  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
          this.modelUrl = this.product.modelUrl || this.modelUrl;

        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }


  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }


  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
    if (this.is3DViewActive) {
      this.is3DViewActive = false;
    }
  }


  active3DView() {
    this.is3DViewActive = true;

  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {

    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/cart']);
    } else {
      if (this.product) {
        const cartItem: ICartItem = {
          userId: this.userId,
          productId: this.product.productId,
          quantity: this.quantity
        }

        this._cartSerive.addProductToCart(cartItem).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Cart", 1);
            } else {
              this.showToastMessage("Already Added to Cart", 0)
            }
          },
          responseError => {
            this.errorMsg = responseError
            console.error("Error Wishlisting product:", this.errorMsg);
          }
        )

      }

    }

    
  }


  addToWhishlist() {

    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/wishlist']);
    } else {


    if (this.product) {
      const wishlistProduct: ISavedProduct = {
        userId: this.userId,
        productId: this.product.productId
      }
      this._productService.addProductToWishlist(wishlistProduct).subscribe(
        responseData => {
          if (responseData) {
            // Product successfully added - show green toast
            this.showToastMessage("Product Added to Wishlist", 1)
          } else {
            // Product already added - show orange toast
            this.showToastMessage("Already Added to Wishlist", 0)
          }
        },
        responseError => {
          this.errorMsg = responseError
          console.error("Error Wishlisting product:", this.errorMsg);
        },
        () => { console.log("Add to Wishlist successfully executed!!"); }
      )
      }
    }
  }


  showToastMessage(message: string, status: number) {
    this.toastMessage = message;
    this.toastStatus = status; // 0 = already added (orange), 1 = successfully added (green)
    this.showToast = true;

    setTimeout(() => {
      // Add the hide class first to animate the toast sliding up
      const toastElement = this.elementRef.nativeElement.querySelector('.toast');
      if (toastElement) {
        toastElement.classList.add('hide');
      }

      // Then hide the toast after animation completes
      setTimeout(() => {
        this.showToast = false;
      }, 300); // Match this with the slideUp animation duration
    }, 3000);
  }
}



//cart-service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from "@angular/common/http"
import { throwError, type Observable, catchError } from "rxjs"
import { ICartItem, ICartProduct, ICartQuantityUpdate } from "../../interfaces/cart"


@Injectable({
  providedIn: 'root'
})
export class CartService {

  constructor(private http: HttpClient) { }

  addProductToCart(cartItem: ICartItem): Observable<boolean> {
    return this.http.post<boolean>('https://localhost:7195/api/Cart/AddToCart', cartItem).pipe(catchError(this.errorHandler));
  }


  getCartItems(): Observable<ICartProduct[]> {
    const ui: string = <string>sessionStorage.getItem("userId");
    const userId = parseInt(ui);
    return this.http.get<ICartProduct[]>(`https://localhost:7195/api/Cart/GetCartItems?userId=${userId}`).pipe(catchError(this.errorHandler));
  }

  updateCartItemQuantity(cartProduct: ICartQuantityUpdate): Observable<boolean>{
    return this.http.put<boolean>('https://localhost:7195/api/Cart/UpdateCartItemQuantity', cartProduct).pipe(catchError(this.errorHandler));
  }


  removeCartItem(cartItemId: number): Observable<boolean> {
    return this.http.delete<boolean>(`https://localhost:7195/api/Cart/RemoveFromCart?cartItemId=${cartItemId}`).pipe(catchError(this.errorHandler));
  }

  clearCart(cartId: number): Observable<boolean> {
    return this.http.delete<boolean>(`https://localhost:7195/api/Cart/ClearCart?cartId=${cartId}`).pipe(catchError(this.errorHandler));
  }


  errorHandler(error: HttpErrorResponse) {
    console.log(error);
    return throwError(error.message || 'ERROR');
  }



}


//product-service.ts
import { Injectable } from "@angular/core"
import  { HttpClient, HttpErrorResponse, HttpHeaders } from "@angular/common/http"
import { throwError, type Observable, catchError } from "rxjs"
import { IProduct } from "../../interfaces/product"
import { ISavedProduct } from "../../interfaces/saved-product";
//import type { Product } from "../models/product.model"
//import { environment } from "../../environments/environment"

@Injectable({
  providedIn: "root",
})
export class ProductService {
  //private apiUrl = `${environment.apiUrl}/api/product`

  constructor(private http: HttpClient) { }

  getProducts(): Observable<IProduct[]> {
    return this.http.get<IProduct[]>('https://localhost:7195/api/Product/GetAllProducts').pipe(catchError(this.errorHandler));
  }

  getProductById(id: number): Observable<IProduct> {
    return this.http.get<IProduct>(`https://localhost:7195/api/Product/GetProductById?id=${id}`).pipe(catchError(this.errorHandler));
  }

  getProductsByCategory(categoryId: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/GetProductsByCategory?categoryId=${categoryId}`).pipe(catchError(this.errorHandler));
  }

  getProductsByPriceRange(minPrice: number, maxPrice: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/GetProductsByPriceRange?minPrice=${minPrice}&maxPrice=${maxPrice}`).pipe(catchError(this.errorHandler));
  }

  getSearchProducts(item: string): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/Product/SearchProducts?searchTerm=${item}`).pipe(catchError(this.errorHandler));
  }

  getSavedProducts(id: number): Observable<IProduct[]> {
    return this.http.get<IProduct[]>(`https://localhost:7195/api/SavedProduct/GetSavedProducts?userId=${id}`).pipe(catchError(this.errorHandler));
  }

  addProduct(product: IProduct): Observable<IProduct> {
    return this.http.post<IProduct>(`https://localhost:7195/api/Product/AddProduct`, product).pipe(catchError(this.errorHandler));
  }

  updateProduct(product: IProduct): Observable<boolean> {
    return this.http.put<boolean>(`https://localhost:7195/api/Product/UpdateProduct`, product).pipe(catchError(this.errorHandler));
  }

  deleteProduct(id: number): Observable<boolean> {
    return this.http.delete<boolean>(`https://localhost:7195/api/Product/DeleteProduct?id=${id}`).pipe(catchError(this.errorHandler));
  }

  removeSavedProduct(userIdd:number,productIdd:number): Observable<boolean> {
    var s: ISavedProduct = {
      userId: userIdd,
      productId: productIdd
    };
    let HttpOptions = { Headers: new HttpHeaders({ 'Content-Type': 'application/json' }), body: s };
    return this.http.delete<boolean>(`https://localhost:7195/api/SavedProduct/RemoveSavedProduct`, HttpOptions).pipe(catchError(this.errorHandler));
  }

  getProductImages(id: number): Observable<IProduct> {
    return this.http.get<IProduct>(`https://localhost:7195/api/Product/GetProductImages?productId=${id}`).pipe(catchError(this.errorHandler));
  }

  addProductToWishlist(whishlistProduct: ISavedProduct): Observable<boolean> {
    return this.http.post<boolean>(`https://localhost:7195/api/SavedProduct/SaveProduct`, whishlistProduct).pipe(catchError(this.errorHandler));

  }

  errorHandler(error: HttpErrorResponse) {
    console.log(error);
    return throwError(error.message || 'ERROR');
  }
}


