//product-component.html
<div class="container mt-5" *ngIf="loading">
  <div class="row">
    <div class="col-12 text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>

<div class="container mt-5" *ngIf="!loading && product">
  <div class="row">
    <!-- Product Images Section -->
    <div class="col-md-6">
      <div class="product-image-container mb-3 pl-2">
        <!-- Regular Image View -->
        <img *ngIf="!is3DViewActive" [src]="activeImageUrl" class="img-fluid main-product-image p-3" alt="{{ product.name }}">

        <!-- 3D Model Viewer -->
        <model-viewer *ngIf="is3DViewActive"
                      src="{{ modelUrl }}"
                      alt="{{ product.name }} 3D Model"
                      auto-rotate
                      camera-controls
                      shadow-intensity="1"
                      exposure="1"
                      class="model-viewer-container">
        </model-viewer>
      </div>

      <div class="product-thumbnails d-flex flex-wrap">
        <!-- Main thumbnail -->
        <div class="thumbnail-item me-2 mb-2" (click)="setActiveImage(product.thumbnailUrl)">
          <img [src]="product.thumbnailUrl" class="img-thumbnail"
               [ngClass]="{'active-thumbnail': activeImageUrl === product.thumbnailUrl && !is3DViewActive}"
               alt="{{ product.name }} main image">
        </div>

        <!-- 3D Model thumbnail (second position) -->
        <div class="thumbnail-item me-2 mb-2 model-3d-thumb" (click)="toggle3DView()">
          <div class="img-thumbnail 3d-thumbnail"
               [ngClass]="{'active-thumbnail': is3DViewActive}">
            <i class="fa fa-cube 3d-icon"></i>
            <span class="3d-label">3D</span>
          </div>
        </div>

        <!-- Additional images (starting from third position) -->
        <div class="thumbnail-item me-2 mb-2" *ngFor="let image of productImages" (click)="setActiveImage(image.imageUrl)">
          <img [src]="image.imageUrl" class="img-thumbnail"
               [ngClass]="{'active-thumbnail': activeImageUrl === image.imageUrl && !is3DViewActive}"
               alt="{{ product.name }} image">
        </div>
      </div>
    </div>

    <!-- Product Details Section -->
    <div class="col-md-6 product-detail-section">
      <h1 class="product-title mb-3">{{ product.name }}</h1>

      <div class="product-price mb-4">
        <h3 class="mb-2">â‚¹{{ product.price.toLocaleString() }}</h3>
        <span class="text-success "><span class="fw-bold">In Stock </span>({{ product.quantity }} available)</span>
      </div>

      <div class="quantity-selector d-flex flex-row mb-4 ">
        <div class="input-group flex" style="width: 150px;">
          <button class="btn btn-outline-secondary" type="button" (click)="decrementQuantity()">
            <i class="fa fa-minus"></i>
          </button>
          <input type="text" class="form-control text-center" [value]="quantity" readonly>
          <button class="btn btn-outline-secondary" type="button" (click)="incrementQuantity()">
            <i class="fa fa-plus"></i>
          </button>
        </div>
      </div>

      <div class="product-actions mb-4">
        <button class="btn btn-primary btn-lg me-2" (click)="addToCart()">
          <i class="fa fa-shopping-cart me-2"></i>Add to Cart
        </button>
        <button class="btn btn-outline-secondary btn-lg">
          <i class="fa fa-heart me-2"></i>Add to Wishlist
        </button>
      </div>
      <div class="product-description mb-4">
        <h4>Description</h4>
        <p>{{ product.description }}</p>
      </div>
    </div>
  </div>
</div>

<!-- Error message display -->
<div class="container mt-5" *ngIf="!loading && !product">
  <div class="alert alert-danger" role="alert">
    <h4 class="alert-heading">Product Not Found!</h4>
    <p>Sorry, we couldn't find the product you're looking for. {{ errorMsg }}</p>
    <hr>
    <p class="mb-0">Please try again or browse our other products.</p>
  </div>
</div>


//product-component.ts
import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ProductService } from '../services/product-service/product.service';

interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;
  is3DViewActive = false
  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb" // Default model URL


  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService,
    private elementRef: ElementRef,
  ) { }

  ngOnInit(): void {
    
    // First approach: Using snapshot
    this.productId = +this.route.snapshot.params['id'];
    

    // Second approach: Using paramMap observable
    

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
      } else {
        this.errorMsg = 'Invalid product ID';
        this.loading = false;
      }
    
  }
  ngAfterViewInit() {
    // Load the model-viewer script
    this.loadModelViewerScript()
  }

  loadModelViewerScript() {
    const script = document.createElement("script")
    script.type = "module"
    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js"
    document.body.appendChild(script)
  }

  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
          this.modelUrl = this.product.modelUrl || this.modelUrl;
        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }

  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }

  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
  }

  toggle3DView() {
    this.is3DViewActive = !this.is3DViewActive
    if (!this.is3DViewActive) {
      // If turning off 3D view, revert to the main image
      this.activeImageUrl = this.product?.thumbnailUrl || ""
    }
  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {
    if (this.product) {
      alert(`${this.quantity} item(s) of ${this.product.name} added to cart!`);
      // Here you would implement the actual cart functionality
    }
  }
}


For the above codes, when I click on the second thumbnail i.e 3d option, The following errors has occuurred in the console.
Access to fetch at 'https://shop3dprojectaccount.blob.core.windows.net/3d-models/Sofa1.glb' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.Understand this error
model-viewer.js:34407 
GET https://shop3dprojectaccount.blob.core.windows.net/3d-models/Sofa1.glb net::ERR_FAILED 200 (OK)
(anonymous) @ zone.js:1521
proto.<computed> @ zone.js:976
load @ model-viewer.js:34407
load @ model-viewer.js:40257
(anonymous) @ model-viewer.js:45826
ZoneAwarePromise @ zone.js:1432
(anonymous) @ model-viewer.js:45825
preload @ model-viewer.js:45933
load @ model-viewer.js:45963
i @ model-viewer.js:57643
ZoneAwarePromise @ zone.js:1432
setSource @ model-viewer.js:57640
[updateSource] @ model-viewer.js:58914
(anonymous) @ model-viewer.js:58622
invoke @ zone.js:375
onInvoke @ core.mjs:25762
invoke @ zone.js:374
runGuarded @ zone.js:144
(anonymous) @ zone.js:128
model-viewer.js:45946 

TypeError: Failed to fetch
    at zone.js:1521:36
    at proto.<computed> (zone.js:976:24)
    at Wo.load (model-viewer.js:34407:3)
    at Sh.load (model-viewer.js:40257:10)
    at model-viewer.js:45826:16
    at new ZoneAwarePromise (zone.js:1432:21)
    at model-viewer.js:45825:12
    at ud.preload (model-viewer.js:45933:34)
    at ud.load (model-viewer.js:45963:20)
    at i (model-viewer.js:57643:73)


What are the main causes for these errors. Is the stored .glb file in azure is not accessible or model-viewer is not working or issue in both of them. Deep down into the errors and tell me the solution to rectify it. Is there any simpler option to display , rotate and zoom the 3d model. 
