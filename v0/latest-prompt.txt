//product-detail.component.html
<div class="container mt-5" *ngIf="loading">
  <div class="row">
    <div class="col-12 text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>

<div class="container mt-5" *ngIf="!loading && product">
  <div class="row">
    <!-- Product Images Section -->
    <div class="col-md-6">
      <div class="product-image-container mb-3 pl-2">
        <img [src]="activeImageUrl" class="img-fluid main-product-image p-3" alt="{{ product.name }}">
      </div>

      <div class="product-thumbnails d-flex flex-wrap">
        <!-- Main thumbnail -->
        <div class="thumbnail-item me-2 mb-2" (click)="setActiveImage(product.thumbnailUrl)">
          <img [src]="product.thumbnailUrl" class="img-thumbnail"
               [ngClass]="{'active-thumbnail': activeImageUrl === product.thumbnailUrl}"
               alt="{{ product.name }} main image">
        </div>

        <!-- Additional images -->
        <div class="thumbnail-item me-2 mb-2" *ngFor="let image of productImages" (click)="setActiveImage(image.imageUrl)">
          <img [src]="image.imageUrl" class="img-thumbnail"
               [ngClass]="{'active-thumbnail': activeImageUrl === image.imageUrl}"
               alt="{{ product.name }} image">
        </div>
      </div>
    </div>

    <!-- Product Details Section -->
    <div class="col-md-6 product-detail-section">
      <h1 class="product-title mb-3">{{ product.name }}</h1>
     

      <div class="product-price mb-4">
        <h3 class="mb-2">â‚¹{{ product.price.toLocaleString() }}</h3>
        <span class="text-success "><span class="fw-bold">In Stock </span>({{ product.quantity }} available)</span>
      </div>



     

      <div class="quantity-selector d-flex flex-row mb-4 ">
        
        <div class="input-group flex" style="width: 150px;">
          <button class="btn btn-outline-secondary" type="button" (click)="decrementQuantity()">
            <i class="fa fa-minus"></i>
          </button>
          <input type="text" class="form-control text-center" [value]="quantity" readonly>
          <button class="btn btn-outline-secondary" type="button" (click)="incrementQuantity()">
            <i class="fa fa-plus"></i>
          </button>
        </div>
      </div>

      <div class="product-actions mb-4">
        <button class="btn btn-primary btn-lg me-2" (click)="addToCart()">
          <i class="fa fa-shopping-cart me-2"></i>Add to Cart
        </button>
        <button class="btn btn-outline-secondary btn-lg">
          <i class="fa fa-heart me-2"></i>Add to Wishlist
        </button>
      </div>
      <div class="product-description mb-4">
        <h4>Description</h4>
        <p>{{ product.description }}</p>
      </div>
    </div>
  </div>
</div>

<!-- Error message display -->
<div class="container mt-5" *ngIf="!loading && !product">
  <div class="alert alert-danger" role="alert">
    <h4 class="alert-heading">Product Not Found!</h4>
    <p>Sorry, we couldn't find the product you're looking for. {{ errorMsg }}</p>
    <hr>
    <p class="mb-0">Please try again or browse our other products.</p>
  </div>
</div>


//product-detail.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ProductService } from '../services/product-service/product.service';

interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;


  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService
  ) { }

  ngOnInit(): void {
    
    // First approach: Using snapshot
    this.productId = +this.route.snapshot.params['id'];
    

    // Second approach: Using paramMap observable
    

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
      } else {
        this.errorMsg = 'Invalid product ID';
        this.loading = false;
      }
    
  }

  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }

  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }

  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {
    if (this.product) {
      alert(`${this.quantity} item(s) of ${this.product.name} added to cart!`);
      // Here you would implement the actual cart functionality
    }
  }
}


//product-detail.component.css
.main-product-image {
  width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  object-fit: contain;
  max-height: 400px;
  background-color: #f8f9fa;
}

.product-image-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 400px;
/*  background-color: #f8f9fa;*/
  border-radius: 8px;
}

.thumbnail-item {
  cursor: pointer;
  transition: all 0.2s ease;
  width: 80px;
  height: 80px;
  overflow: hidden;
}

  .thumbnail-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .thumbnail-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

.active-thumbnail {
  border: 2px solid #007bff !important;
}
.product-detail-section{
    text-align:start
}
.product-title {
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.product-rating {
  color: #ffc107;
}

.product-price h3 {
  font-weight: 700;
  color: #212529;
  margin-bottom: 0.5rem;
}

.quantity-selector input {
  font-weight: bold;
}

.product-actions .btn {
  padding: 0.75rem 1.5rem;
}

.nav-tabs .nav-link {
  font-weight: 500;
}

.tab-content {
  background-color: #fff;
}

/* Responsive adjustments */
@media (max-width: 767.98px) {
  .product-image-container {
    height: 300px;
  }

  .thumbnail-item {
    width: 60px;
    height: 60px;
  }

  .product-actions .btn {
    width: 100%;
    margin-bottom: 0.5rem;
  }
}





The above codes I have done already. I want to add the 3d model feature.For this, make the second thumbnail image as 3d option image, so that when the second thumbnail is clicked then it opens 3d model . Use the google's <model-viewer> component by using embeded javascript.
